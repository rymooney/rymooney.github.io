---
title: "Text Analysis"
format: html
---

Today, I will be practicing my text analysis using str\_\*() commands, regular expressions, and plotting character-based data! To do this, I will be analyzing character data from all of Emily Dickinson's Poems!

Some of the packages I will need:

```{r}
#| message: false
#| warning: false
library(tidyverse) 
library(ggrepel)
```

The original data is from [Gutenburg](https://www.gutenberg.org/files/12242/12242-h/12242-h.htm) and is on the GitHub repo of [Amherst-Statistics](https://github.com/Amherst-Statistics/DickinsonPoems).

*Accessing the data, printing some of the contents, and reading a poem!*

```{r}
#| message: false
#| warning: false
devtools::install_github("Amherst-Statistics/DickinsonPoems") # this command was taken from the Amherst-Statistics repo linked above.

files_Dickinson <- system.file("extdata", package = "DickinsonPoems") # this command was taken from the Amherst-Statistics repo linked above.

head(list.files((files_Dickinson))) # first six files in the repo
```

```{r}
poem166 <- paste(system.file("extdata", package = "DickinsonPoems"), 
                  "gutenberg3.txt166", sep = "/")
readLines(poem166) # this command was taken from the Amherst-Statistics repo linked above.
```


For future analyses, I will need a data frame, which will have one column as the identifier of the poem and the second column containing the text of that poem.

```{r}
files <- list.files(files_Dickinson, pattern = "^gutenberg.*\\.txt\\d+$", full.names = TRUE)

poems_dataframe <- tibble(
  title = basename(files),
  text  = map_chr(files, ~ paste(readLines(.x, warn = FALSE), collapse = "\n"))
)

head(poems_dataframe)
```
Let's also add another column where we use a regular expression to extract parts of the the title of each poem. I will use a *lookbehind* to find the poem titles, since the titles of the poems are preceded by roman numerals in Dickinson's poems. I will search for capital letters after the lookbehind, since Dickinson's poems have titles that are capitalized, whereas the text is lowercase. Then I will use a *lookahead* to search for a period since the titles of the poems end with a period always. I will also remove all the poems that don't have a title so it will be easier to reference them later!
```{r}
poems_df_title <- poems_dataframe |>
  mutate(
    poem_title = str_extract(text, "(?<=\\b[A-Z]{1,4}\\.?\\s)[A-Z][A-Z'\\s]+(?=\\.)")
  ) |>
  select(poem_title, text) |>
  filter(!is.na(poem_title))

poems_df_title
```

Let's make a new data frame unnests the current vector we have so we will have a new row where each one is one word of each poem. 
I will use a regular expression to select only letters and apostrophes, so I only have words in these vectors. 
```{r}
poem_words <- poems_df_title |>
  mutate(words = str_extract_all(text, "[A-Za-z']+")) |>
  select(poem_title, words) |>
  unnest(words)|>
  mutate(words=str_to_lower(words))

head(poem_words)
```

Let's see what words are the most common in Emily Dickinson's poems:
```{r}
top_words <- poem_words |>
  count(words, sort = TRUE)

head(top_words)
```

Okay, this is kind of boring... as we are getting words that are not unique to Emily Dickinson's poetry, just to the English Language. Still, let's visualize the top 35 words of this to see if we can pick out anything interesting!

```{r}
top_35_words <- poem_words |>
  unnest(words) |>
  mutate(words = str_to_lower(words)) |>
  count(words, sort = TRUE) |>
  slice(1:35)

top_35_words |>
  mutate(words = fct_reorder(words, n)) |>
  ggplot(aes(y = words, x = n)) +
  geom_col(fill='red') +
  labs(
    title = "Most Common Words in Emily Dickinson's Poems",
    x = "Word",
    y = "Number of times word appears"
  )+
  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))
```
This is still boring. So let's look at the next 20 most common words to see if I can find any unique noun.

```{r}
words_35_55 <- poem_words |>
  unnest(words) |>
  mutate(words = str_to_lower(words)) |>
  group_by(words) |>
  summarise(n = n()) |>
  arrange(desc(n))|>
  slice(35:55)

words_35_55 |>
  mutate(words = fct_reorder(words, n)) |>
  ggplot(aes(y = words, x = n)) +
  geom_col(fill='green', width = 0.8) +
  labs(
    title = "Word frequency Emily Dickinson's Poems",
    x = "Word",
    y = "Number of times word appears"
  )+
  theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))
```

There it is! So the most common noun in Emily Dickinson's poetry is "day".

Let's see what poems use this word the most.

```{r}
top_day_poems <- poems_df_title |>
  mutate(day_count = str_count(str_to_lower(text), "\\bday\\b")) |> 
  arrange(desc(day_count)) |>
  slice_head(n = 10)|>
  select(poem_title, day_count)

top_day_poems
```

So, PARLOR is the poem that has the word "day" the most amount of times!

If Dickinson is writing about day, surely she too is writing about night? Let's see.

```{r}
top_night_poems <- poems_df_title |>
  mutate(night_count = str_count(text, "(?i)\\bnight\\b")) |>
  arrange(desc(night_count)) |>
  slice_head(n = 10) |>
  select(poem_title, night_count)

top_night_poems
```

```{r}
top15_night <- poems_df_title |>
  mutate(night_count = str_count(text, "(?i)\\bnight\\b")) |>
  arrange(desc(night_count)) |>
  slice_head(n = 15)

top15_night |>
  mutate(poem_title = fct_reorder(poem_title, night_count)) |>
  ggplot(aes(y = poem_title, x = night_count)) +
  geom_col(fill = "midnightblue") +
  labs(
    title = "Poems with the Most Mentions of “night”",
    x = "Poem",
    y = 'Count of “night”'
  )
```

So, she does write about night as well!!!

Let's visualize the poems where she might write about BOTH day and night!

```{r}
day_night_both <- poems_df_title |>
  mutate(
    day_count   = str_count(text, "\\bday\\b"),
    night_count = str_count(text, "\\bnight\\b")
  ) |>
  filter(day_count > 0, night_count > 0)

day_night_both
```

```{r}
day_night_both |>
  ggplot(aes(x = day_count, y = night_count, label = poem_title)) +
  geom_point() +
  geom_text_repel(force=120) +
  labs(
    title = 'Poems Mentioning Both “day” and “night”',
    x = 'Count of “day”',
    y = 'Count of “night”'
  ) 
```

