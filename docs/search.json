[
  {
    "objectID": "TextAnalysis.html",
    "href": "TextAnalysis.html",
    "title": "Text Analysis",
    "section": "",
    "text": "Today, I will be practicing my text analysis using str_*() commands, regular expressions, and plotting character-based data! To do this, I will be analyzing character data from all of Emily Dickinson’s Poems!\nSome of the packages I will need:\n\nlibrary(tidyverse) \nlibrary(ggrepel)\n\nThe original data is from Gutenburg and is on the GitHub repo of Amherst-Statistics.\nAccessing the data, printing some of the contents, and reading a poem!\n\ndevtools::install_github(\"Amherst-Statistics/DickinsonPoems\") # this command was taken from the Amherst-Statistics repo linked above.\n\nfiles_Dickinson &lt;- system.file(\"extdata\", package = \"DickinsonPoems\") # this command was taken from the Amherst-Statistics repo linked above.\n\nhead(list.files((files_Dickinson))) # first six files in the repo\n\n[1] \"gutenberg1.txt001\" \"gutenberg1.txt002\" \"gutenberg1.txt003\"\n[4] \"gutenberg1.txt004\" \"gutenberg1.txt005\" \"gutenberg1.txt006\"\n\n\n\npoem166 &lt;- paste(system.file(\"extdata\", package = \"DickinsonPoems\"), \n                  \"gutenberg3.txt166\", sep = \"/\")\nreadLines(poem166) # this command was taken from the Amherst-Statistics repo linked above.\n\n [1] \"XX. \"                                      \n [2] \" \"                                         \n [3] \"OLD-FASHIONED. \"                           \n [4] \" \"                                         \n [5] \"Arcturus is his other name, -- \"           \n [6] \"I'd rather call him star! \"                \n [7] \"It's so unkind of science \"                \n [8] \"To go and interfere! \"                     \n [9] \" \"                                         \n[10] \"I pull a flower from the woods, -- \"       \n[11] \"A monster with a glass \"                   \n[12] \"Computes the stamens in a breath, \"        \n[13] \"And has her in a class. \"                  \n[14] \" \"                                         \n[15] \"Whereas I took the butterfly \"             \n[16] \"Aforetime in my hat, \"                     \n[17] \"He sits erect in cabinets, \"               \n[18] \"The clover-bells forgot. \"                 \n[19] \" \"                                         \n[20] \"What once was heaven, is zenith now. \"     \n[21] \"Where I proposed to go \"                   \n[22] \"When time's brief masquerade was done, \"   \n[23] \"Is mapped, and charted too! \"              \n[24] \" \"                                         \n[25] \"What if the poles should frisk about \"     \n[26] \"And stand upon their heads! \"              \n[27] \"I hope I 'm ready for the worst, \"         \n[28] \"Whatever prank betides! \"                  \n[29] \" \"                                         \n[30] \"Perhaps the kingdom of Heaven 's changed! \"\n[31] \"I hope the children there \"                \n[32] \"Won't be new-fashioned when I come, \"      \n[33] \"And laugh at me, and stare! \"              \n[34] \" \"                                         \n[35] \"I hope the father in the skies \"           \n[36] \"Will lift his little girl, -- \"            \n[37] \"Old-fashioned, naughty, everything, -- \"   \n[38] \"Over the stile of pearl! \"                 \n[39] \" \"                                         \n[40] \" \"                                         \n[41] \" \"                                         \n[42] \" \"                                         \n\n\nFor future analyses, I will need a data frame, which will have one column as the identifier of the poem and the second column containing the text of that poem.\n\nfiles &lt;- list.files(files_Dickinson, pattern = \"^gutenberg.*\\\\.txt\\\\d+$\", full.names = TRUE)\n\npoems_dataframe &lt;- tibble(\n  title = basename(files),\n  text  = map_chr(files, ~ paste(readLines(.x, warn = FALSE), collapse = \"\\n\"))\n)\n\nhead(poems_dataframe)\n\n# A tibble: 6 × 2\n  title             text                                                        \n  &lt;chr&gt;             &lt;chr&gt;                                                       \n1 gutenberg1.txt001 \"I. \\n \\nSUCCESS. \\n \\n[Published in \\\"A Masque of Poets\\\" …\n2 gutenberg1.txt002 \"II. \\n \\nOur share of night to bear, \\nOur share of mornin…\n3 gutenberg1.txt003 \"III. \\n \\nROUGE ET NOIR. \\n \\nSoul, wilt thou toss again? …\n4 gutenberg1.txt004 \"IV. \\n \\nROUGE GAGNE. \\n \\n'T is so much joy! 'T is so muc…\n5 gutenberg1.txt005 \"V. \\n \\nGlee! The great storm is over! \\nFour have recover…\n6 gutenberg1.txt006 \"VI. \\n \\nIf I can stop one heart from breaking, \\nI shall …\n\n\nLet’s also add another column where we use a regular expression to extract parts of the the title of each poem. I will use a lookbehind to find the poem titles, since the titles of the poems are preceded by roman numerals in Dickinson’s poems. I will search for capital letters after the lookbehind, since Dickinson’s poems have titles that are capitalized, whereas the text is lowercase. Then I will use a lookahead to search for a period since the titles of the poems end with a period always. I will also remove all the poems that don’t have a title so it will be easier to reference them later!\n\npoems_df_title &lt;- poems_dataframe |&gt;\n  mutate(\n    poem_title = str_extract(text, \"(?&lt;=\\\\b[A-Z]{1,4}\\\\.?\\\\s)[A-Z][A-Z'\\\\s]+(?=\\\\.)\")\n  ) |&gt;\n  select(poem_title, text) |&gt;\n  filter(!is.na(poem_title))\n\npoems_df_title\n\n# A tibble: 127 × 2\n   poem_title      text                                                         \n   &lt;chr&gt;           &lt;chr&gt;                                                        \n 1 NOIR            \"III. \\n \\nROUGE ET NOIR. \\n \\nSoul, wilt thou toss again? \\…\n 2 A LIBRARY       \"X. \\n \\nIN A LIBRARY. \\n \\nA precious, mouldering pleasure …\n 3 SECRET          \"XIV. \\n \\nTHE SECRET. \\n \\nSome things that fly there be, -…\n 4 LONELY HOUSE    \"XV. \\n \\nTHE LONELY HOUSE. \\n \\nI know some lonely houses o…\n 5 BOOK OF MARTYRS \"XVIII. \\n \\nTHE BOOK OF MARTYRS. \\n \\nRead, sweet, how othe…\n 6 MYSTERY OF PAIN \"XIX. \\n \\nTHE MYSTERY OF PAIN. \\n \\nPain has an element of …\n 7 BOOK            \"XXI. \\n \\nA BOOK. \\n \\nHe ate and drank the precious words,…\n 8 A FLOWER        \"VII. \\n \\nWITH A FLOWER. \\n \\nI hide myself within my flowe…\n 9 OUTLET          \"XI. \\n \\nTHE OUTLET. \\n \\nMy river runs to thee: \\nBlue sea…\n10 VAIN            \"XII. \\n \\nIN VAIN. \\n \\nI cannot live with you, \\nIt would …\n# ℹ 117 more rows\n\n\nLet’s make a new data frame unnests the current vector we have so we will have a new row where each one is one word of each poem. I will use a regular expression to select only letters and apostrophes, so I only have words in these vectors.\n\npoem_words &lt;- poems_df_title |&gt;\n  mutate(words = str_extract_all(text, \"[A-Za-z']+\")) |&gt;\n  select(poem_title, words) |&gt;\n  unnest(words)|&gt;\n  mutate(words=str_to_lower(words))\n\nhead(poem_words)\n\n# A tibble: 6 × 2\n  poem_title words\n  &lt;chr&gt;      &lt;chr&gt;\n1 NOIR       iii  \n2 NOIR       rouge\n3 NOIR       et   \n4 NOIR       noir \n5 NOIR       soul \n6 NOIR       wilt \n\n\nLet’s see what words are the most common in Emily Dickinson’s poems:\n\ntop_words &lt;- poem_words |&gt;\n  count(words, sort = TRUE)\n\nhead(top_words)\n\n# A tibble: 6 × 2\n  words     n\n  &lt;chr&gt; &lt;int&gt;\n1 the     690\n2 a       305\n3 and     280\n4 to      223\n5 of      196\n6 i       181\n\n\nOkay, this is kind of boring… as we are getting words that are not unique to Emily Dickinson’s poetry, just to the English Language. Still, let’s visualize the top 35 words of this to see if we can pick out anything interesting!\n\ntop_35_words &lt;- poem_words |&gt;\n  unnest(words) |&gt;\n  mutate(words = str_to_lower(words)) |&gt;\n  count(words, sort = TRUE) |&gt;\n  slice(1:35)\n\ntop_35_words |&gt;\n  mutate(words = fct_reorder(words, n)) |&gt;\n  ggplot(aes(y = words, x = n)) +\n  geom_col(fill='red') +\n  labs(\n    title = \"Most Common Words in Emily Dickinson's Poems\",\n    x = \"Word\",\n    y = \"Number of times word appears\"\n  )+\n  theme(axis.text.x = element_text(size = 6, angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThis is still boring. So let’s look at the next 20 most common words to see if I can find any unique noun.\n\nwords_35_55 &lt;- poem_words |&gt;\n  unnest(words) |&gt;\n  mutate(words = str_to_lower(words)) |&gt;\n  group_by(words) |&gt;\n  summarise(n = n()) |&gt;\n  arrange(desc(n))|&gt;\n  slice(35:55)\n\nwords_35_55 |&gt;\n  mutate(words = fct_reorder(words, n)) |&gt;\n  ggplot(aes(y = words, x = n)) +\n  geom_col(fill='green', width = 0.8) +\n  labs(\n    title = \"Word frequency Emily Dickinson's Poems\",\n    x = \"Word\",\n    y = \"Number of times word appears\"\n  )+\n  theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThere it is! So the most common noun in Emily Dickinson’s poetry is “day”.\nLet’s see what poems use this word the most.\n\ntop_day_poems &lt;- poems_df_title |&gt;\n  mutate(day_count = str_count(str_to_lower(text), \"\\\\bday\\\\b\")) |&gt; \n  arrange(desc(day_count)) |&gt;\n  slice_head(n = 10)|&gt;\n  select(poem_title, day_count)\n\ntop_day_poems\n\n# A tibble: 10 × 2\n   poem_title      day_count\n   &lt;chr&gt;               &lt;int&gt;\n 1 PARLOR                  3\n 2 THE DAY                 2\n 3 JUGGLER OF DAY          2\n 4 LONELY HOUSE            1\n 5 MYSTERY OF PAIN         1\n 6 WIFE                    1\n 7 ARMIES                  1\n 8 GRASS                   1\n 9 WORLDS                  1\n10 DAY                     1\n\n\nSo, PARLOR is the poem that has the word “day” the most amount of times!\nIf Dickinson is writing about day, surely she too is writing about night? Let’s see.\n\ntop_night_poems &lt;- poems_df_title |&gt;\n  mutate(night_count = str_count(text, \"(?i)\\\\bnight\\\\b\")) |&gt;\n  arrange(desc(night_count)) |&gt;\n  slice_head(n = 10) |&gt;\n  select(poem_title, night_count)\n\ntop_night_poems\n\n# A tibble: 10 × 2\n   poem_title      night_count\n   &lt;chr&gt;                 &lt;int&gt;\n 1 SEA OF SUNSET             2\n 2 COMING OF NIGHT           2\n 3 LONELY HOUSE              1\n 4 GRASS                     1\n 5 THE DAY                   1\n 6 RETURN                    1\n 7 CONTRACT                  1\n 8 LETTER                    1\n 9 HOME                      1\n10 PARLOR                    1\n\n\n\ntop15_night &lt;- poems_df_title |&gt;\n  mutate(night_count = str_count(text, \"(?i)\\\\bnight\\\\b\")) |&gt;\n  arrange(desc(night_count)) |&gt;\n  slice_head(n = 15)\n\ntop15_night |&gt;\n  mutate(poem_title = fct_reorder(poem_title, night_count)) |&gt;\n  ggplot(aes(y = poem_title, x = night_count)) +\n  geom_col(fill = \"midnightblue\") +\n  labs(\n    title = \"Poems with the Most Mentions of “night”\",\n    x = \"Poem\",\n    y = 'Count of “night”'\n  )\n\n\n\n\n\n\n\n\nSo, she does write about night as well!!!\nLet’s visualize the poems where she might write about BOTH day and night!\n\nday_night_both &lt;- poems_df_title |&gt;\n  mutate(\n    day_count   = str_count(text, \"\\\\bday\\\\b\"),\n    night_count = str_count(text, \"\\\\bnight\\\\b\")\n  ) |&gt;\n  filter(day_count &gt; 0, night_count &gt; 0)\n\nday_night_both\n\n# A tibble: 6 × 4\n  poem_title          text                                 day_count night_count\n  &lt;chr&gt;               &lt;chr&gt;                                    &lt;int&gt;       &lt;int&gt;\n1 GRASS               \"IX. \\n \\nTHE GRASS. \\n \\nThe grass…         1           1\n2 THE DAY             \"XII. \\n \\nPSALM OF THE DAY. \\n \\nA…         1           1\n3 LETTER              \"V. \\n \\nTHE LETTER. \\n \\n\\\"GOING t…         1           1\n4 PARLOR              \"IV. \\n \\nDAY'S PARLOR. \\n \\nThe da…         2           1\n5 HAD A GUINEA GOLDEN \"XIX. \\n \\nI HAD A GUINEA GOLDEN. \\…         1           1\n6 SOUL'S STORM        \"XLIX. \\n \\nWe never know we go, --…         1           1\n\n\n\nday_night_both |&gt;\n  ggplot(aes(x = day_count, y = night_count, label = poem_title)) +\n  geom_point() +\n  geom_text_repel(force=120) +\n  labs(\n    title = 'Poems Mentioning Both “day” and “night”',\n    x = 'Count of “day”',\n    y = 'Count of “night”'\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ryan Mooney",
    "section": "",
    "text": "Hi there! I am Ryan, a student at Pomona College majoring in Molecular Biology and minoring in Data Science. I am an aspiring biomedical researcher, with keen interests in cancer biology and immuno-oncology. Sequencing has revolutionized how we analyze genetic information, so minoring in data science has provided me with invaluable skills to approach translational research questions. I love learning, and pursuing a career in research is how I plan to continue doing what I love (to learn!). I am a rather crafty person, and I particularly enjoy knitting, sewing, and collaging.\nCheck out the pages on my site to learn more about me!"
  },
  {
    "objectID": "data-viz.html",
    "href": "data-viz.html",
    "title": "Data Viz",
    "section": "",
    "text": "This is my data visualization page, where I upload my data visualizations done on TidyTuesday data."
  },
  {
    "objectID": "UNESCO.html",
    "href": "UNESCO.html",
    "title": "UNESCO",
    "section": "",
    "text": "library(tidyverse)\n\n\nThe Data\nI wanted to explore a simple data set comparing UNESCO world heritage sites in Norway, Denmark, and Sweden. The original data is from UNESCO and was downloaded from TidyTuesday. The data also comes from the {pixarfilms} R package by Eric Leung.\n\nunesco &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-02-06/heritage.csv')\n\n\nunesco2 &lt;- unesco |&gt;\n  pivot_longer(\n    cols = c(`2004`, `2022`),\n    names_to = \"year\",\n    values_to = \"number_of_sites\"\n  )\n\n\n\nLet’s plot the data!\n\nggplot(unesco2, aes(x = country, y = number_of_sites, color = year)) +\n  geom_point(size = 3) +\n  labs(\n    title = \"UNESCO World Heritage Sites\",\n    x = \"Country\",\n    y = \"Number of Sites\"\n  )\n\n\n\n\n\n\n\n\nShowing the number of World Heritage Sites in Norway, Denmark, and Sweden across 2004 to 2022.\nImage credit: Ryan Mooney"
  },
  {
    "objectID": "pixar.html",
    "href": "pixar.html",
    "title": "pixar",
    "section": "",
    "text": "library(tidyverse)\n\n\nThe Data\nLet’s explore a data set about the ratings of pixar films Pixar films; the data here is from the TidyTuesday repo and the original data is from Wikipedia.\n\npixar_ratings &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')\n\n\n\nLet’s plot it!\n\npixar_ratings_long &lt;- pixar_ratings |&gt;\n  pivot_longer(\n    cols = c(rotten_tomatoes, metacritic, critics_choice),\n    names_to = \"rating_source\",\n    values_to = \"score\"\n  )|&gt;\n  filter(!is.na(score)) \n\nggplot(pixar_ratings_long, aes(x = film, y = score, color = rating_source)) +\n  geom_point(size = 3) +\n  geom_line(aes(group = rating_source)) +\n  labs(\n    title = \"Pixar Movie Ratings\",\n    x = \"Film\",\n    y = \"Score\",\n    color = \"Rating Source\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi and welcome to my site!\n\nMy background\nI am originally from Denver, Colorado. I have three older sisters, who are some of my biggest inspirations. After graduating high school in 2023, I went to Pomona College, where I expect to graduate in 2027 with a Bachelor of Arts in Molecular Biology and a minor in Data Science.\n\n\nMy research experience\nAt Pomona College, I have been involved in research since my freshman year. In Dr. Malkiat Johal’s lab, I work to quantify biomolecular interactions. I have worked on various projects leveraging surface chemistry instruments like Quartz Crystal Microgravimetry with Dissipation Monitoring (QCM-D) and Surface Plasmon Resonance (SPR). My work over my first-year was on the QCM-D, where we quantified off-target effects of beta-cyclodextrin drugs on biomimetic lipid membranes, which was published in Langmuir. I then switched gears over the summer and worked with the SPR to develop a novel method using chemical kinetics data to determine the molecular weight of polyelectrolytes (this work has been submitted, and we are waiting to hear back from the reviewers!). I am working on developing and finalizing some other projects related to enzyme inhibition and immuno-oncological interactions, so stay tuned for updates!\nI have also been fortunate enough to engage in research at Memorial Sloan Kettering Cancer Center under the guidance of Dr. Michael Gormally and Dr. Christopher Klebanoff. Here, I gained training in immuno-oncology and contributed to a project with the goals of designing immunotherapies for solid-phase cancers. Specificaly, this project involved working with cell culture, ELISA, IncuCyte live-cell imaging, and flow cytometry to evaluate and quantify the killing of cancer cells by T cells transduced with cancer neoepitope-specific T cell receptors. I got to experiment with armoring our T cells with additional potency, in the form of constitutive cytoking (IL-18) secretion and by engineering CD8 co-receptor expression. Our results were tremendously promising, and in vivo trials of our work are beginning now!"
  }
]